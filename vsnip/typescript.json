{
	"slicer": {
		"prefix": "slicer",
		"body": [
			"import {createSlice, PayloadAction} from '@reduxjs/toolkit';",
			"import _ from 'lodash';",
			"import { $1ReadState } from '../../models';",
			"",
			"const initialState: $1ReadState[] = [];",
			"",
			"export const $2sSlicer = createSlice({",
			"\tname: '$3',",
			"\treducers: {",
			"\t\tADD_$4: (state, action: PayloadAction<$1ReadState>) => {",
			"\t\t\tstate.push(action.payload);",
			"\t\t},",
			"\t\tSET_$4S: (state, action: PayloadAction<$1ReadState[]>) => {",
			"\t\t\tstate.push(...action.payload);",
			"\t\t\tconst dupFree = _.uniqBy(state, '${5:id}');",
			"\t\t\tstate.splice(0, state.length);",
			"\t\t\tstate.push(...dupFree);",
			"\t\t},",
			"\t\tDELETE_$4: (state, action: PayloadAction<$1ReadState>) => {",
			"\t\t\tconst newState = state.filter($2 => $2.${5:id} !== action.payload.${5:id});",
			"\t\t\tstate.splice(0, state.length);",
			"\t\t\tstate.push(...newState);",
			"\t\t},",
			"\t\tDELETE_$4S: (state, action: PayloadAction<${7:number}[]>) => {",
			"\t\t\tconst newState = state.filter(${5:id} => !!!_.find(action.payload, { ${5:id} }));",
			"\t\t\tstate.splice(0, state.length);",
			"\t\t\tstate.push(...newState);",
			"\t\t},",
			"\t\tUPDATE_$4: (state, action: PayloadAction<$1ReadState>) => {",
			"\t\t\tconst newState = state.map($2 => ($2.${5:id} === action.payload.${5:id}) ? {",
			"\t\t\t\t\t...$2,",
			"\t\t\t\t\t...action.payload",
			"\t\t\t\t} : $2",
			"\t\t\t);",
			"\t\t\tstate.splice(0, state.length);",
			"\t\t\tstate.push(...newState);",
			"\t\t}",
			"\t},",
			"\tinitialState,",
			"});",
			"",
			"export const {",
			"\tADD_$4,",
			"\tSET_$4S,",
			"\tDELETE_$4,",
			"\tDELETE_$4S,",
			"\tUPDATE_$4,",
			"} = $2sSlicer.actions;",
			"",
			"export const $2sReducer = $2sSlicer.reducer;"
			],
		"description": "Create a redux slicer"
	},
	"saga": {
		"prefix": "saga",
		"body": [
			"import { put, all, takeLatest, delay, race, call } from 'redux-saga/effects';",
			"import _ from 'lodash';",
			"import {createAction} from '@reduxjs/toolkit';",
			"import {$1CreateState, $1ReadState, $1UpdateState} from '../../models';",
			"import {ADD_$2, DELETE_$2, SET_$2S, SET_FETCHING, SET_SUBMITTING, UPDATE_$2} from '../slicers';",
			"import {Service} from '../../service';",
			"import {AxiosResponse} from 'axios';",
			"import {TOGGLE_ACTION_ERROR_ACTION, TOGGLE_ACTION_SUCCESS_ACTION, TOGGLE_ACTION_TIMEOUT_ACTION} from './app.saga';",
			"import { Where, FilterExcludingWhere, Filter, Count } from '@loopback/repository';",
			"",
			"export const ADD_$2_ACTION = createAction('ADD_$2_ACTION', (payload: $1CreateState, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\tpayload,",
			"\t\tpathParams,",
			"\t}",
			"}));",
			"",
			"export function* add$3Saga(action: ReturnType<typeof ADD_$2_ACTION>) {",
			"\tyield put(SET_SUBMITTING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: AxiosResponse<$1ReadState>",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.create, action.payload.payload, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result) {",
			"\t\t\tyield put(ADD_$2(result.data));",
			"\t\t\tyield put(TOGGLE_ACTION_SUCCESS_ACTION())",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_ERROR_ACTION());",
			"\t}",
			"\tyield put(SET_SUBMITTING(false));",
			"}",
			"",
			"export function* watchAdd$3Saga() {",
			"\tyield takeLatest(ADD_$2_ACTION.toString(), add$3Saga);",
			"}",
			"",
			"export const DELETE_SELECTED_$2S = createAction('DELETE_SELECTED_$2S', (where: Where<$1ReadState>, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\twhere,",
			"\t\tpathParams",
			"\t}",
			"}));",
			"",
			"export function* deleteSelected$3s(action: ReturnType<typeof DELETE_SELECTED_$2S>) {",
			"\tyield put(SET_SUBMITTING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: Count",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.bulkDelete, action.payload.where, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result && result.count > 0) {",
			"\t\t\tyield put(TOGGLE_ACTION_SUCCESS_ACTION())",
			"\t\t\twindow.location.reload();",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_ERROR_ACTION());",
			"\t}",
			"\tyield put(SET_SUBMITTING(false));",
			"}",
			"",
			"export function* watchDeleteSelected$3sSaga() {",
			"\tyield takeLatest(DELETE_SELECTED_$2S.toString(), deleteSelected$3s);",
			"}",
			"",
			"export const DELETE_SELECTED_$2 = createAction('DELETE_SELECTED_$2', (${4:id}: ${5:number}, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\tid,",
			"\t\tpathParams,",
			"\t}",
			"}));",
			"",
			"export function* deleteSelected$3(action: ReturnType<typeof DELETE_SELECTED_$2>) {",
			"\tyield put(SET_SUBMITTING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: AxiosResponse<$1ReadState>",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.delete, action.payload.id, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result) {",
			"\t\t\tyield put(DELETE_$2(result.data));",
			"\t\t\tyield put(TOGGLE_ACTION_SUCCESS_ACTION())",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_ERROR_ACTION());",
			"\t}",
			"\tyield put(SET_SUBMITTING(false));",
			"}",
			"",
			"export function* watchDeleteSelected$3Saga() {",
			"\tyield takeLatest(DELETE_SELECTED_$2.toString(), deleteSelected$3);",
			"}",
			"",
			"export const UPDATE_$2_ACTION = createAction('UPDATE_$2_ACTION', (${4:id}: ${5:number}, payload: $1UpdateState, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\t${4:id},",
			"\t\tpayload,",
			"\t\tpathParams",
			"\t}",
			"}));",
			"",
			"export function* update$3Saga(action: ReturnType<typeof UPDATE_$2_ACTION>) {",
			"\tyield put(SET_SUBMITTING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: AxiosResponse<$1ReadState>",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.update, action.payload.${4:id}, action.payload.payload, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result) {",
			"\t\t\tyield put(UPDATE_$2(result.data));",
			"\t\t\tyield put(TOGGLE_ACTION_SUCCESS_ACTION())",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_ERROR_ACTION());",
			"\t}",
			"\tyield put(SET_SUBMITTING(false));",
			"}",
			"",
			"export function* watchUpdate$3Saga() {",
			"\tyield takeLatest(UPDATE_$2_ACTION.toString(), update$3Saga);",
			"}",
			"",
			"export const FETCH_$2_ACTION = createAction('FETCH_$2_ACTION', (${4:id}: ${5:number}, filter?: FilterExcludingWhere<$1ReadState>, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\t${4:id},",
			"\t\tfilter,",
			"\t\tpathParams,",
			"\t}",
			"}));",
			"",
			"export function* fetch$3(action: ReturnType<typeof FETCH_$2_ACTION>) {",
			"\tyield put(SET_FETCHING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: AxiosResponse<$1ReadState>",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.fetch, action.payload.id, action.payload.filter, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result) {",
			"\t\t\tyield put(SET_$2S([result.data]));",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t}",
			"\tyield put(SET_FETCHING(false));",
			"}",
			"",
			"export function* watchFetch$3() {",
			"\tyield takeLatest(FETCH_$2_ACTION.toString(), fetch$3);",
			"}",
			"",
			"export const FETCH_$2S_ACTION = createAction('FETCH_$2S_ACTION', (filter?: Filter<$1ReadState>, pathParams?: { [ key: string ]: ${5:number} }) => ({",
			"\tpayload: {",
			"\t\tfilter,",
			"\t\tpathParams,",
			"\t}",
			"}));",
			"",
			"export function* fetch$3s(action: ReturnType<typeof FETCH_$2S_ACTION>) {",
			"\tyield put(SET_FETCHING(true));",
			"\ttry {",
			"\t\ttype RaceResult = {",
			"\t\t\tresult: AxiosResponse<$1ReadState[]>",
			"\t\t}",
			"\t\tconst { result }: RaceResult = yield race({",
			"\t\t\tresult: call(Service.$3s.fetchAll, action.payload.filter, action.payload.pathParams),",
			"\t\t\ttimeout: delay(5000)",
			"\t\t});",
			"\t\tif (result) {",
			"\t\t\tyield put(SET_$2S(result.data));",
			"\t\t} else {",
			"\t\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t\t}",
			"\t} catch (_) {",
			"\t\tyield put(TOGGLE_ACTION_TIMEOUT_ACTION());",
			"\t}",
			"\tyield put(SET_FETCHING(false));",
			"}",
			"",
			"export function* watchFetch$3s() {",
			"\tyield takeLatest(FETCH_$2S_ACTION.toString(), fetch$3s);",
			"}",
			"",
			"export function* watch$3Sagas() {",
			"\tyield all([",
			"\t\twatchAdd$3Saga(),",
			"\t\twatchDeleteSelected$3sSaga(),",
			"\t\twatchDeleteSelected$3Saga(),",
			"\t\twatchUpdate$3Saga(),",
			"\t\twatchFetch$3(),",
			"\t\twatchFetch$3s(),",
			"\t]);",
			"}"
		],
		"description": "Creates a redux saga"
	},
	"api": {
		"prefix": "api",
		"body": [
			"import {$1, $2} from '../models';",
			"import {BaseAPI} from './base.api';",
			"",
			"export class $1sAPI extends BaseAPI {",
			"\tcreate = async (data: Omit<$2, '${3:id}'>) => {",
			"\t\treturn this.client.post<$1>($1.getURI(), data);",
			"\t}",
			"\tfetch = async (${3:id}: ${4:number}) => {",
			"\t\treturn this.client.get<$1>(`\\${$1.getURI()}/\\${${3:id}}`);",
			"\t}",
			"\tfetchAll = async () => {",
			"\t\treturn this.client.get<$1[]>($1.getURI());",
			"\t}",
			"\tdelete = async (${3:id}: ${4:number}) => {",
			"\t\treturn this.client.delete<$1>(`\\${$1.getURI()}/\\${${3:id}}`);",
			"\t}",
			"\tbulkDelete = async (data: { ${3:id}s: ${4:number}[] }) => {",
			"\t\treturn this.client.post<$1[]>(`\\${$1.getURI()}/actions/bulkDelete`, data);",
			"\t}",
			"\tupdate = async (",
			"\t\t${3:id}: ${4:number},",
			"\t\tdata: Omit<$2, '${3:id}'>",
			"\t) => {",
			"\t\treturn this.client.put<$1>(`\\${$1.getURI()}/\\${${3:id}}`, data);",
			"\t}",
			"}"
		],
		"description": "Creates an api"
	},
	"nmodel": {
		"prefix": "nmodel",
		"body": [
			"export type $1Props = {",
			"\t$2",
			"}",
			"",
			"export class $1 {",
			"\t$2",
			"}"
		],
		"description": "Creates a normal model"
	},
	"napi": {
		"prefix": "napi",
		"body": [
			"import {$1, $1Props} from '../models';",
			"import {BaseAPI} from './base.api';",
			"",
			"export class $1sAPI extends BaseAPI {",
			"\tcreate = async (data: Omit<$1Props, 'id'>) => {",
			"\t\treturn this.client.post<$1>('/$2/', data);",
			"\t}",
			"\tfetch = async (id: number) => {",
			"\t\treturn this.client.get<$1>(`/$2/\\${id}`);",
			"\t}",
			"\tfetchAll = async () => {",
			"\t\treturn this.client.get<$1[]>('/$2/');",
			"\t}",
			"\tdelete = async (id: number) => {",
			"\t\treturn this.client.delete<$1>(`/$2/\\${id}`);",
			"\t}",
			"\tupdate = async (",
			"\t\tdata: $1Props",
			"\t) => {",
			"\t\treturn this.client.put<$1>(`/$2/`, data);",
			"\t}",
			"}"
		],
		"description": "Creates a normal api"
	},
	"repo": {
		"prefix": "repo",
		"body": [
			"import { injectable } from 'inversify';",
			"import { $1, $1Props } from '../models';",
			"import { BaseRepository } from './base.repository';",
			"",
			"@injectable()",
			"export class $1sRepository extends BaseRepository {",
			"\tasync count() {",
			"\t\treturn await this._connector('$2s').count();",
			"\t}",
			"",
			"\tasync delete(id: number) {",
			"\t\treturn await this._connector('$2s').delete().whereRaw('id = ?', [id]);",
			"\t}",
			"",
			"\tasync get(id: number) {",
			"\t\treturn await this._connector('$2s').select<$1>().whereRaw('id = ?', [id]);",
			"\t}",
			"",
			"\tasync getAll() {",
			"\t\treturn await this._connector('$2s').select<$1[]>();",
			"\t}",
			"",
			"\tasync insert($2: $1Props) {",
			"\t\treturn await this._connector('$2s').insert({ ...$2 });",
			"\t}",
			"",
			"\tasync update(id: number, $2: Partial<$1Props>) {",
			"\t\treturn await this._connector('$2s').update($2).whereRaw('id = ?', [id]);",
			"\t}",
			"}"
		],
		"description": "Create a new repository"
	},
	"model": {
		"prefix": "model",
		"body": [
			"export type $1Props = {",
			"\t$2",
			"}",
			"",
			"export type $1Relations = {",
			"\t$3",
			"}",
			"",
			"export class $1 {",
			"\tconstructor(data: $1Props) {",
				"\t\tObject.assign(this, data);",
			"\t}",
			"\t$2",
			"}"
		],
		"description": "Create a new model"
	},
	"controller": {
		"prefix": "controller",
		"body": [
			"import 'reflect-metadata';",
			"import express from 'express';",
			"import { inject } from 'inversify';",
			"import { controller, httpDelete, httpGet, httpPost, httpPut, request, response } from 'inversify-express-utils';",
			"import { $1 } from '../../models';",
			"import { TYPES } from '../../types';",
			"import { $1sRepository } from '@repositories/$2s.repository';",
			"",
			"@controller('/admin/$2s/')",
			"export class $1Controller {",
			"\tconstructor(",
			"\t\t@inject(TYPES.$1sRepository) private _$2s: $1sRepository,",
			"\t) { }",
			"",
			"\t@httpGet(':id([0-9]*)\\$')",
			"\tpublic async get(@request() req: express.Request, @response() res: express.Response): Promise<void> {",
			"\t\tconst id = +req.params.id;",
			"\t\tconst $2 = await this._$2s.get(id);",
			"\t\tres.status(200).json($2);",
			"\t}",
			"",
			"\t@httpGet('')",
			"\tpublic async getAll(@request() __: express.Request, @response() res: express.Response) {",
			"\t\tconst $2List = await this._$2s.getAll();",
			"\t\tres.status(200).json($2List);",
			"\t}",
			"",
			"\t@httpPost('')",
			"\tpublic async add(@request() req: express.Request, @response() res: express.Response): Promise<void> {",
			"\t\tconst $2 = new $1({ ...req.body });",
			"\t\tawait this._$2s.insert({ ...$2 });",
			"\t\tres.status(200).json($2);",
			"\t}",
			"",
			"\t@httpDelete(':id([0-9]*)\\$')",
			"\tpublic async delete(@request() req: express.Request, @response() res: express.Response): Promise<void> {",
			"\t\tconst result = await this._$2s.delete(+req.params.id);",
			"\t\tres.status(204).json(result);",
			"\t}",
			"",
			"\t@httpPut(':id([0-9]*)\\$')",
			"\tpublic async update(@request() req: express.Request, @response() res: express.Response): Promise<void> {",
			"\t\tconst id = +req.params.id;",
			"\t\tconst result = await this._$2s.update(id, { ...req.body });",
			"\t\tres.status(204).json(result);",
			"\t}",
			"}"
		],
		"description": "Create a new controller"
	},
	"service": {
		"prefix": "service",
		"description": "Creates a new service",
		"body": [
			"import {$1} from '../models';",
			"import {BaseService} from './base.service';",
			"",
			"export class $1sService extends BaseService<$1, number> {",
			"\tconstructor() {",
			"\t\tsuper('/$2');",
			"\t}",
			"}"
		]
	},
	"nexts": {
		"prefix": "nexts",
		"description": "Creates a new NextJS service",
		"body": [
			"import {$1CreateState, $1ReadState, $1UpdateState} from '../models';",
			"import {ServiceBase} from './base.service';",
			"",
			"export class $1sService extends ServiceBase<$1CreateState, $1ReadState, $1UpdateState, ${3:number}> {",
			"\tconstructor() {",
			"\t\tsuper('/$2');",
			"\t}",
			"}"
		]
	},
	"ded": {
		"prefix": "ded",
		"description": "Disable eslint react-hooks/exhaustive-deps",
		"body": "// eslint-disable-next-line react-hooks/exhaustive-deps"
	},
	"ue": {
		"prefix": "ue",
		"description": "React's useEffect",
		"body": [
			"useEffect(() => {",
			"\t$0",
			"}, [$1]);"
		]
	},
	"us": {
		"prefix": "us",
		"description": "React's useState",
		"body": "const [$3, set$4${3/(.*)/${3:/capitalize}/}] = useState<$2>($1);"
	},
	"usn": {
		"prefix": "usn",
		"description": "React's useState with null possibility",
		"body": "const [$3, set$4${3/(.*)/${3:/capitalize}/}] = useState<$2 | null>(${1:null});"
	},
	"imp": {
		"prefix": "imp",
		"description": "",
		"body": "import { $0 } from \"$1\";"
	},
	"impd": {
		"prefix": "impd",
		"description": "",
		"body": "import $0 from \"$1\";"
	},
	"test": {
		"prefix": "test",
		"description": "Add a new jest test",
		"body": [
			"test('$1', () => {",
			"\t$0",
			"});"
		]
	},
	"af": {
		"prefix": "af",
		"description": "Create an arrow function",
		"body": "($1) => {$0}"
	}
}
